import { promises as fs } from 'fs';
import { join, parse } from 'path';
import AdminJS from 'adminjs';
process.env.ADMIN_JS_SKIP_BUNDLE = 'false';
process.env.NODE_ENV = 'production';
const ADMINJS_LOCAL_DIR_PATH = '.adminjs';
const ADMINJS_ASSETS_DIR_PATH = 'node_modules/adminjs/lib/frontend/assets/scripts';
const DESIGN_SYSTEM_DIR_PATH = 'node_modules/@adminjs/design-system';
const getDestinationPath = (asset, timestamp) => {
    if (!timestamp)
        return asset;
    const { ext, name } = parse(asset);
    return `${name}.${timestamp}${ext}`;
};
const createAssetsManifest = (files) => {
    const coreScripts = files.reduce((memo, { destinationPath, name }) => {
        memo[name] = parse(destinationPath).base;
        return memo;
    }, {});
    return JSON.stringify(coreScripts);
};
/**
 * Bundles AdminJS javascript browser files. This is an alternative to bundling those files on server startup.
 * The bundled files are stored in "destinationDir". Afterwards, you can for example:
 * 1. Upload those files to a public storage bucket and tell AdminJS to use files from there:
 * ```javascript
 *   const adminJs = new AdminJS({ assetsCDN: <your storage bucket url> })
 * ```
 * 2. Serve the "destinationDir" as a public folder, using i. e. express.static:
 * ```javascript
 *   app.use(express.static(destinationDir));
 *   ...
 *   const adminJs = new AdminJS({ assetsCDN: <your server's url> })
 * ```
 *
 * IMPORTANT: To prevent AdminJS from attempting to generate a new bundle on server startup,
 * you must set `ADMIN_JS_SKIP_BUNDLE="true"` environment variable!
 *
 *
 * @param {BundleConfig} options
 * @memberof module:@adminjs/bundler
 * @method
 * @name bundle
 * @example
 * import { bundle } from '../../src';
 *
 * (async () => {
 *   const files = await bundle({
 *     customComponentsInitializationFilePath: 'src/components/index.ts',
 *     destinationDir: 'src/public',
 *   });
 *
 *   console.log(files);
 *   // do something with built files here
 * })();
 *
 */
const bundle = async ({ destinationDir, componentLoader, adminJsLocalDir = ADMINJS_LOCAL_DIR_PATH, adminJsAssetsDir = ADMINJS_ASSETS_DIR_PATH, designSystemDir = DESIGN_SYSTEM_DIR_PATH, versioning, }) => {
    const admin = new AdminJS({ componentLoader });
    await admin.initialize();
    const timestamp = versioning?.manifestPath ? Date.now() : null;
    await fs.mkdir(join(process.cwd(), destinationDir), { recursive: true });
    const files = [
        {
            name: 'components.bundle.js',
            sourcePath: join(process.cwd(), `${adminJsLocalDir}/bundle.js`),
            destinationPath: join(process.cwd(), destinationDir, getDestinationPath('components.bundle.js', timestamp))
        },
        {
            name: 'app.bundle.js',
            sourcePath: join(process.cwd(), `${adminJsAssetsDir}/app-bundle.production.js`),
            destinationPath: join(process.cwd(), destinationDir, getDestinationPath('app.bundle.js', timestamp)),
        },
        {
            name: 'global.bundle.js',
            sourcePath: join(process.cwd(), `${adminJsAssetsDir}/global-bundle.production.js`),
            destinationPath: join(process.cwd(), destinationDir, getDestinationPath('global.bundle.js', timestamp))
        },
        {
            name: 'design-system.bundle.js',
            sourcePath: join(process.cwd(), `${designSystemDir}/bundle.production.js`),
            destinationPath: join(process.cwd(), destinationDir, getDestinationPath('design-system.bundle.js', timestamp))
        },
    ];
    const [customComponentsBundle, ...standardBundles] = files;
    await Promise.all(standardBundles.map(({ sourcePath, destinationPath }) => fs.copyFile(sourcePath, destinationPath)));
    await fs.rename(customComponentsBundle.sourcePath, customComponentsBundle.destinationPath);
    if (versioning?.manifestPath) {
        const manifestContents = createAssetsManifest(files);
        const { ext } = parse(versioning?.manifestPath);
        if (ext !== '.json') {
            await Promise.all(files.map(({ destinationPath }) => fs.unlink(destinationPath)));
            throw new Error('Invalid "versioning.manifestPath". File name must have .json extension.');
        }
        await fs.writeFile(join(process.cwd(), versioning.manifestPath), manifestContents);
    }
    console.log(`✨ Successfully built AdminJS bundle files! ✨`);
    return files;
};
export default bundle;
